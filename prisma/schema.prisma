// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  data      Json?
  auth_id   String   @unique
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auth      Auth?    @relation(fields: [auth_id], references: [id])
}

model Auth {
  id           String       @id @default(uuid())
  salt         String
  current_hash String
  metadata     Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userProfile  UserProfile?
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  city      String?
  number    String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claims    Claim[]
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String?
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claims    Claim[]
}

model Claim {
  id          Int        @id @default(autoincrement())
  details     String?
  customer_id Int
  employee_id Int
  docs        Json?
  policy_id   Int
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customer    Customer   @relation(fields: [customer_id], references: [id])
  employee    Employee   @relation(fields: [employee_id], references: [id])
  policyType  PolicyType @relation(fields: [policy_id], references: [id])
}

model PolicyType {
  id        Int      @id @default(autoincrement())
  data      Json?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claims    Claim[]
}
